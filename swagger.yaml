swagger: '2.0'
info:
  version: 1.0.0
  title: ScreenBuddy API
  description: API documentation for ScreenBuddy backend endpoints.
host: cometcontacts4331.com
basePath: /api
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json

paths:
  /register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Registers a new user and sends a verification code to their email.
      parameters:
        - in: body
          name: body
          description: User registration data
          required: true
          schema:
            type: object
            required: [email, username, password]
            properties:
              email: { type: string, example: "user@example.com" }
              username: { type: string, example: "myuser" }
              password: { type: string, example: "mypassword" }
      responses:
        201:
          description: User registered successfully
          schema:
            type: object
            properties:
              message: { type: string }
              user:
                type: object
                properties:
                  id: { type: string }
                  username: { type: string }
                  email: { type: string }
        400:
          description: Missing required fields
          schema:
            type: object
            properties:
              message: { type: string }
        409:
          description: User already exists
          schema:
            type: object
            properties:
              message: { type: string }
        500:
          description: Server error
          schema:
            type: object
            properties:
              message: { type: string }

  /verify-email:
    post:
      tags:
        - Authentication
      summary: Verify user email
      description: Verifies a user's email using a code sent to their email address.
      parameters:
        - in: body
          name: body
          description: Email and verification code
          required: true
          schema:
            type: object
            required: [email, code]
            properties:
              email: { type: string, example: "user@example.com" }
              code: { type: string, example: "123456" }
      responses:
        200:
          description: Email verified
          schema:
            type: object
            properties:
              message: { type: string }
        400:
          description: Invalid or expired code
          schema:
            type: object
            properties:
              message: { type: string }
        404:
          description: User not found
          schema:
            type: object
            properties:
              message: { type: string }
        500:
          description: Server error
          schema:
            type: object
            properties:
              message: { type: string }

  /login:
    post:
      tags:
        - Authentication
      summary: Log in a user
      description: Authenticates a user and returns a JWT token.
      parameters:
        - in: body
          name: body
          description: User login credentials
          required: true
          schema:
            type: object
            required: [username, password]
            properties:
              username: { type: string, example: "myuser" }
              password: { type: string, example: "mypassword" }
      responses:
        200:
          description: Login successful
          schema:
            type: object
            properties:
              message: { type: string }
              token: { type: string }
              user:
                type: object
                properties:
                  id: { type: string }
                  email: { type: string }
        400:
          description: Missing credentials
          schema:
            type: object
            properties:
              message: { type: string }
        401:
          description: Invalid credentials or email not verified
          schema:
            type: object
            properties:
              message: { type: string }
              user:
                type: object
                properties:
                  id: { type: string }
                  email: { type: string }
        500:
          description: Server error
          schema:
            type: object
            properties:
              message: { type: string }

  /profile/{id}:
    get:
      tags:
        - User
      summary: Get user profile
      description: Returns the profile information for a user. Requires authentication.
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: User ID
        - in: header
          name: Authorization
          required: true
          type: string
          description: Bearer token
      responses:
        201:
          description: User found
          schema:
            type: object
            properties:
              message: { type: string }
              user:
                type: object
                properties:
                  name: { type: string }
                  created: { type: string, format: date-time }
        500:
          description: Server error
          schema:
            type: object
            properties:
              message: { type: string }

  /goals/create:
    post:
      tags:
        - Goal
      summary: Create a new goal
      description: Creates a new goal for the authenticated user.
      parameters:
        - in: header
          name: Authorization
          required: true
          type: string
          description: Bearer token
        - in: body
          name: body
          required: true
          schema:
            type: object
            required: [title, minutes]
            properties:
              title: { type: string }
              minutes: { type: integer }
      responses:
        201:
          description: Goal created successfully
          schema:
            type: object
            properties:
              message: { type: string }
              goal:
                type: object
                properties:
                  _id: { type: string }
                  userID: { type: string }
                  title: { type: string }
                  targetMinutes: { type: integer }
                  completedMinutes: { type: integer }
                  isActive: { type: boolean }
                  lastCompletedDate: { type: string, format: date-time }
                  createdAt: { type: string, format: date-time }
                  updatedAt: { type: string, format: date-time }
        400:
          description: User not found
          schema:
            type: object
            properties:
              message: { type: string }
        500:
          description: Server error
          schema:
            type: object
            properties:
              message: { type: string }

  /goals/status/{name}:
    get:
      tags:
        - Goal
      summary: Get status of a goal by name
      description: Returns the status of a goal for the authenticated user.
      parameters:
        - in: path
          name: name
          required: true
          type: string
          description: Goal name
        - in: header
          name: Authorization
          required: true
          type: string
          description: Bearer token
      responses:
        200:
          description: Goal status fetched successfully
          schema:
            type: object
            properties:
              message: { type: string }
              goal:
                type: object
                properties:
                  _id: { type: string }
                  userID: { type: string }
                  title: { type: string }
                  targetMinutes: { type: integer }
                  completedMinutes: { type: integer }
                  isActive: { type: boolean }
                  lastCompletedDate: { type: string, format: date-time }
                  createdAt: { type: string, format: date-time }
                  updatedAt: { type: string, format: date-time }
        400:
          description: User or goal not found
          schema:
            type: object
            properties:
              message: { type: string }
        500:
          description: Server error
          schema:
            type: object
            properties:
              message: { type: string }

  /goals/update:
    post:
      tags:
        - Goal
      summary: Update goal status
      description: Updates the active status of a goal.
      parameters:
        - in: header
          name: Authorization
          required: true
          type: string
          description: Bearer token
        - in: body
          name: body
          required: true
          schema:
            type: object
            required: [goalId, activeStatus]
            properties:
              goalId: { type: string }
              activeStatus: { type: boolean }
      responses:
        200:
          description: Goal updated successfully
          schema:
            type: object
            properties:
              message: { type: string }
              goal:
                type: object
                properties:
                  _id: { type: string }
                  userID: { type: string }
                  title: { type: string }
                  targetMinutes: { type: integer }
                  completedMinutes: { type: integer }
                  isActive: { type: boolean }
                  lastCompletedDate: { type: string, format: date-time }
                  createdAt: { type: string, format: date-time }
                  updatedAt: { type: string, format: date-time }
        400:
          description: User or goal not found
          schema:
            type: object
            properties:
              message: { type: string }
        500:
          description: Server error
          schema:
            type: object
            properties:
              message: { type: string }

  /goals/all:
    get:
      tags:
        - Goal
      summary: Get all goals
      description: Returns all goals for the authenticated user.
      parameters:
        - in: header
          name: Authorization
          required: true
          type: string
          description: Bearer token
      responses:
        200:
          description: Goals fetched successfully
          schema:
            type: object
            properties:
              message: { type: string }
              goals:
                type: array
                items:
                  type: object
                  properties:
                    _id: { type: string }
                    userID: { type: string }
                    title: { type: string }
                    targetMinutes: { type: integer }
                    completedMinutes: { type: integer }
                    isActive: { type: boolean }
                    lastCompletedDate: { type: string, format: date-time }
                    createdAt: { type: string, format: date-time }
                    updatedAt: { type: string, format: date-time }
        400:
          description: User not found
          schema:
            type: object
            properties:
              message: { type: string }
        500:
          description: Server error
          schema:
            type: object
            properties:
              message: { type: string }

  /goals/active:
    get:
      tags:
        - Goal
      summary: Get active goal
      description: Returns the active goal for the authenticated user.
      parameters:
        - in: header
          name: Authorization
          required: true
          type: string
          description: Bearer token
      responses:
        200:
          description: Active goal fetched successfully
          schema:
            type: object
            properties:
              message: { type: string }
              goal:
                type: object
                properties:
                  _id: { type: string }
                  userID: { type: string }
                  title: { type: string }
                  targetMinutes: { type: integer }
                  completedMinutes: { type: integer }
                  isActive: { type: boolean }
                  lastCompletedDate: { type: string, format: date-time }
                  createdAt: { type: string, format: date-time }
                  updatedAt: { type: string, format: date-time }
        400:
          description: User not found or no active goal
          schema:
            type: object
            properties:
              message: { type: string }
        500:
          description: Server error
          schema:
            type: object
            properties:
              message: { type: string }

  /goals/remove:
    post:
      tags:
        - Goal
      summary: Remove a goal
      description: Removes a goal for the authenticated user.
      parameters:
        - in: header
          name: Authorization
          required: true
          type: string
          description: Bearer token
        - in: body
          name: body
          required: true
          schema:
            type: object
            required: [goalId]
            properties:
              goalId: { type: string }
      responses:
        200:
          description: Goal removed successfully
          schema:
            type: object
            properties:
              message: { type: string }
        400:
          description: User or goal not found
          schema:
            type: object
            properties:
              message: { type: string }
        500:
          description: Server error
          schema:
            type: object
            properties:
              message: { type: string }

  /buddy/buy:
    post:
      tags:
        - Buddy
      summary: Buy a buddy
      description: Buys a buddy for the authenticated user.
      parameters:
        - in: header
          name: Authorization
          required: true
          type: string
          description: Bearer token
        - in: body
          name: body
          required: true
          schema:
            type: object
            required: [buddyId]
            properties:
              buddyId: { type: string }
      responses:
        200:
          description: Buddy bought successfully
          schema:
            type: object
            properties:
              message: { type: string }
              buddy:
                type: string
        400:
          description: Invalid user
          schema:
            type: object
            properties:
              message: { type: string }
        500:
          description: Server error
          schema:
            type: object
            properties:
              message: { type: string }

  /buddy/equip:
    post:
      tags:
        - Buddy
      summary: Equip a buddy
      description: Equips a buddy for the authenticated user.
      parameters:
        - in: header
          name: Authorization
          required: true
          type: string
          description: Bearer token
        - in: body
          name: body
          required: true
          schema:
            type: object
            required: [buddyId]
            properties:
              buddyId: { type: string }
      responses:
        200:
          description: Buddy equipped successfully
          schema:
            type: object
            properties:
              message: { type: string }
              buddy:
                type: string
        400:
          description: User not found
          schema:
            type: object
            properties:
              message: { type: string }
        500:
          description: Server error
          schema:
            type: object
            properties:
              message: { type: string }

  /buddy/all:
    get:
      tags:
        - Buddy
      summary: Get all buddies
      description: Returns all buddies for the authenticated user.
      parameters:
        - in: header
          name: Authorization
          required: true
          type: string
          description: Bearer token
      responses:
        200:
          description: Buddies fetched successfully
          schema:
            type: object
            properties:
              message: { type: string }
              buddies:
                type: array
                items:
                  type: object
                  properties:
                    _id: { type: string }
                    userID: { type: string }
                    name: { type: string }
                    level: { type: integer }
                    xp: { type: number }
                    xpToLevelUp: { type: integer }
                    isEquipped: { type: boolean }
                    createdAt: { type: string, format: date-time }
                    updatedAt: { type: string, format: date-time }
        400:
          description: User not found
          schema:
            type: object
            properties:
              message: { type: string }
        500:
          description: Server error
          schema:
            type: object
            properties:
              message: { type: string }

  /logs/add:
    post:
      tags:
        - Logs
      summary: Log screen event
      description: Log a screen_on or screen_off event.
      parameters:
        - in: header
          name: Authorization
          required: true
          type: string
          description: Bearer token
        - in: body
          name: body
          required: true
          schema:
            type: object
            required: [event]
            properties:
              event:
                type: string
                enum: [screen_off, screen_on]
      responses:
        200:
          description: Activity logged successfully
          schema:
            type: object
            properties:
              message: { type: string }
        400:
          description: Invalid user or missing event
          schema:
            type: object
            properties:
              message: { type: string }
        500:
          description: Server error
          schema:
            type: object
            properties:
              message: { type: string }

  /metrics/screentime:
    get:
      tags:
        - Metrics
      summary: Get last 7 days of screen time
      description: Returns the last 7 days of screen time data for the authenticated user.
      parameters:
        - in: header
          name: Authorization
          required: true
          type: string
          description: Bearer token
      responses:
        200:
          description: Screen time data fetched successfully
          schema:
            type: object
            properties:
              message:
                type: string
                example: Screen time data fetched successfully.
              screentime:
                type: object
                additionalProperties:
                  type: number
                example:
                  "2024-07-20T00:00:00.000Z": 120
                  "2024-07-21T00:00:00.000Z": 90
                  "2024-07-22T00:00:00.000Z": 60
                  "2024-07-23T00:00:00.000Z": 0
                  "2024-07-24T00:00:00.000Z": 45
                  "2024-07-25T00:00:00.000Z": 30
                  "2024-07-26T00:00:00.000Z": 75
        400:
          description: User not found
          schema:
            type: object
            properties:
              message:
                type: string
                example: User not found.
        500:
          description: Internal server error
          schema:
            type: object
            properties:
              message:
                type: string
