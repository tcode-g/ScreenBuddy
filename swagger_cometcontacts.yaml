swagger: '2.0'

host: "cometcontacts4331.com"

schemes: 
  - http

basePath: /LAMPAPI

info:
  version: 1.0.0
  title: Conact Manager API
  description: The API for a small project assignment for COP4331 at UCF

consumes:
  - application/json

produces:
  - application/json

paths:
  /SignUp.php:
    post:
      tags:
      - Account Management
      summary: Register a new user
      description: Creates a new user in the system with provided first name, last name, login, and password.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: User registration information
          required: true
          schema:
            type: object
            required:
              - firstname
              - lastname
              - login
              - password
            properties:
              firstname:
                type: string
                example: "John"
              lastname:
                type: string
                example: "Doh"
              login:
                type: string
                example: "JDoh"
              password:
                type: string
                example: "0cef1fb10f60529028a71f58e54ed07b"
      responses:
        200:
          description: Successfully registered user
          schema:
            type: object
            properties:
              error:
                type: boolean
                example: false
              flag:
                type: integer
              firstName:
                type: string
                example: "John"
              lastName:
                type: string
                example: "Doh"
              login:
                type: string
                example: "JDoh"
        400:
          description: Input validation or duplicate user error
          schema:
            type: object
            properties:
              error:
                type: boolean
                example: true
              error_message:
                type: string
                example: "User already exists."
              flag:
                type: integer
                example: 2
  
  /Login.php:
    post:
      tags:
      - Account Management
      summary: Log in a user
      description: Authenticates a user by validating login credentials and returns basic user info if successful.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: User login credentials
          required: true
          schema:
            type: object
            required:
              - login
              - password
            properties:
              login:
                type: string
                example: "JDoh"
              password:
                type: string
                example: "0cef1fb10f60529028a71f58e54ed07b"
      responses:
        200:
          description: Successful login
          schema:
            type: object
            properties:
              error:
                type: boolean
                example: false
              id:
                type: integer
                example: 1
              firstName:
                type: string
                example: "John"
              lastName:
                type: string
                example: "Doh"
        400:
          description: Invalid login credentials
          schema:
            type: object
            properties:
              error:
                type: boolean
                example: true
              error_message:
                type: string
                example: "Invalid login"
                
  /AddContact.php:
    post:
      tags: 
      - User Actions
      summary: Add a new contact
      description: Creates a new contact for a user, ensuring the contact does not already exist.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Contact details to add
          required: true
          schema:
            type: object
            required:
              - firstname
              - lastname
              - phone
              - email
              - userid
            properties:
              firstname:
                type: string
                example: "Jane"
              lastname:
                type: string
                example: "Doh"
              phone:
                type: string
                example: "3217777777"
              email:
                type: string
                example: "jdoh123@email.com"
              userid:
                type: integer
                example: 1
      responses:
        200:
          description: Contact added successfully
          schema:
            type: object
            properties:
              error:
                type: boolean
                example: false
        409:
          description: Contact already exists
          schema:
            type: object
            properties:
              error:
                type: boolean
                example: true
              error_message:
                type: string
                example: "Contact Already Exists"
        500:
          description: Database error
          schema:
            type: object
            properties:
              error:
                type: boolean
                example: true
              error_message:
                type: string
                example: "placeholder"
                
  /SearchContacts.php:
    post:
      tags: 
      - User Actions
      summary: Search contacts for a user
      description: Returns a paginated list of contacts that match the search string across multiple fields for the given user.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Search criteria for user contacts
          required: true
          schema:
            type: object
            required:
              - userid
              - limit
              - offset
            properties:
              userid:
                type: integer
                example: 1
              limit:
                type: integer
                example: 10
                description: Max number of records to return
              offset:
                type: integer
                description: Number of records to skip
              searchstring:
                type: string
                example: "a"
                description: Optional search term to filter results
      responses:
        200:
          description: List of matching contacts
          schema:
            type: object
            properties:
              error:
                type: boolean
              contacts:
                type: array
                items:
                  type: object
                  properties:
                    ID:
                      type: integer
                    UserId:
                      type: integer
                    FirstName:
                      type: string
                    LastName:
                      type: string
                    Email:
                      type: string
                    Phone:
                      type: string
              total:
                type: array
                items:
                  type: object
                  properties:
                    total_count:
                      type: integer
                      example: 0
        400:
          description: No matching records found
          schema:
            type: object
            properties:
              error:
                type: boolean
              error_message:
                type: string
                example: "No records found."
        500:
          description: Database or server error
          schema:
            type: object
            properties:
              error:
                type: boolean
              error_message:
                type: string
                
  /UpdateContact.php:
    post:
      tags: 
      - User Actions
      summary: Update an existing contact
      description: Updates a user's contact if it exists and does not cause duplication.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Original and new contact information
          required: true
          schema:
            type: object
            required:
              - ofirstname
              - olastname
              - ophone
              - oemail
              - userid
              - nfirstname
              - nlastname
              - nphone
              - nemail
            properties:
              ofirstname:
                type: string
                example: "Richard"
              olastname:
                type: string
                example: "Leinecker"
              ophone:
                type: string
                example: "4078230169"
              oemail:
                type: string
                example: "Richard.Leinecker@ucf.edu"
              userid:
                type: integer
                example: 1
              nfirstname:
                type: string
                example: "Prof"
              nlastname:
                type: string
                example: "Leinecker"
              nphone:
                type: string
                example: "4078230169"
              nemail:
                type: string
                example: "Richard.Leinecker@ucf.edu"

      responses:
        200:
          description: Contact updated successfully
          schema:
            type: object
            properties:
              error:
                type: boolean
        409:
          description: Duplicate contact with new values already exists
          schema:
            type: object
            properties:
              error:
                type: boolean
              error_message:
                type: string
                example: "Duplicate contact exists."
        500:
          description: Server or database error
          schema:
            type: object
            properties:
              error:
                type: boolean
              error_message:
                type: string
                
  /DeleteContact.php:
    post:
      tags: 
      - User Actions
      summary: Delete a contact
      description: Deletes a contact by ID for the specified user. Fails gracefully if contact is not found.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: User and contact ID to delete
          required: true
          schema:
            type: object
            required:
              - userid
              - id
            properties:
              userid:
                type: integer
              id:
                type: integer
      responses:
        200:
          description: Contact deleted successfully
          schema:
            type: object
            properties:
              error:
                type: boolean
        400:
          description: Contact not found
          schema:
            type: object
            properties:
              error:
                type: boolean
              error_message:
                type: string
                example: "Contact not found"
        500:
          description: Server or database error
          schema:
            type: object
            properties:
              error:
                type: boolean
              error_message:
                type: string
                
  /GetContacts.php:
    post:
      tags: 
        - User Actions
      summary: Get paginated contacts for a user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              userid:
                type: integer
                example: 1
              limit:
                type: integer
                example: 10
              offset:
                type: integer
                example: 0
            required:
              - UserId
              - limit
              - offset
      responses:
        200:
          description: A list of contacts and total count
          schema:
            type: object
            properties:
              error:
                type: boolean
                example: false
              contacts:
                type: array
                items:
                  type: object
                  properties:
                    ID:
                      type: integer
                    UserId:
                      type: integer
                    FirstName:
                      type: string
                    LastName:
                      type: string
                    Email:
                      type: string
                    Phone:
                      type: string

              total:
                type: array
                items:
                  type: object
                  properties:
                    total_count:
                      type: integer
              error_message:
                type: string
        400:
          description: No matching records found
          schema:
            type: object
            properties:
              error:
                type: boolean
              error_message:
                type: string
                example: "No records found."
        500:
          description: Database or server error
          schema:
            type: object
            properties:
              error:
                type: boolean
              error_message:
                type: string